name: Link Issue to Branch and PR

on:
  pull_request:
    types: [opened, synchronized, closed]
  push:
    branches-ignore:
      - main
      - develop

permissions:
  issues: write
  pull-requests: read
  contents: read

jobs:
  link-issue:
    runs-on: ubuntu-latest

    steps:
      - name: Extract Issue Number
        id: extract
        run: |
          # Try to extract issue number from branch name or PR title
          ISSUE_NUMBER=""
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Extract from PR branch name
            BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
          
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
            echo "PR_URL=$PR_URL" >> $GITHUB_ENV
            echo "EVENT_TYPE=pull_request" >> $GITHUB_ENV
          
            # Extract issue number from branch name (format: issue-123-description)
            if [[ $BRANCH_NAME =~ issue-([0-9]+) ]]; then
              ISSUE_NUMBER="${BASH_REMATCH[1]}"
            fi
          
            # If not found in branch, try PR title (format: #123 or Fixes #123)
            if [[ -z "$ISSUE_NUMBER" && $PR_TITLE =~ \#([0-9]+) ]]; then
              ISSUE_NUMBER="${BASH_REMATCH[1]}"
            fi
          
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Extract from branch name for push events
            BRANCH_NAME="${{ github.ref_name }}"
          
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
            echo "EVENT_TYPE=push" >> $GITHUB_ENV
          
            if [[ $BRANCH_NAME =~ issue-([0-9]+) ]]; then
              ISSUE_NUMBER="${BASH_REMATCH[1]}"
            fi
          fi
          
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
          echo "Extracted issue number: $ISSUE_NUMBER from branch: $BRANCH_NAME"

      - name: Update Issue with Branch Link
        if: env.ISSUE_NUMBER != '' && env.EVENT_TYPE == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = parseInt(process.env.ISSUE_NUMBER);
            const branchName = process.env.BRANCH_NAME;
            const branchUrl = `https://github.com/${{ github.repository }}/tree/${branchName}`;
            
            try {
              // Get current issue
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
            
              const currentBody = issue.data.body || '';
            
              // Check if branch info already exists
              if (!currentBody.includes('## 🔗 Collegamenti')) {
                const branchSection = `

  ## 🔗 Collegamenti

  ### 🌿 Branch
  - **Branch attivo**: [\`${branchName}\`](${branchUrl})
  - **Ultimo commit**: ${context.sha.substring(0, 7)} - ${new Date().toLocaleString('it-IT')}

---
*Collegamenti aggiornati automaticamente*`;
  
  await github.rest.issues.update({
owner: context.repo.owner,
repo: context.repo.repo,
issue_number: issueNumber,
body: currentBody + branchSection
});
  
  console.log(`✅ Issue #${issueNumber} updated with branch link`);
} else {
  // Update existing branch info
  const updatedBody = currentBody.replace(
  /### 🌿 Branch[\s\S]*?(?=###|---|\n\n|$)/,
  `### 🌿 Branch
- **Branch attivo**: [\`${branchName}\`](${branchUrl})
- **Ultimo commit**: ${context.sha.substring(0, 7)} - ${new Date().toLocaleString('it-IT')}
  
  `
  );
  
  await github.rest.issues.update({
owner: context.repo.owner,
repo: context.repo.repo,
issue_number: issueNumber,
body: updatedBody
});
  
  console.log(`🔄 Issue #${issueNumber} branch info updated`);
}
} catch (error) {
  console.log(`❌ Error updating issue #${issueNumber}:`, error.message);
}

- name: Update Issue with PR Link
  if: env.ISSUE_NUMBER != '' && env.EVENT_TYPE == 'pull_request'
  uses: actions/github-script@v7
  with:
    script: |
      const issueNumber = parseInt(process.env.ISSUE_NUMBER);
      const prNumber = parseInt(process.env.PR_NUMBER);
      const prUrl = process.env.PR_URL;
      const branchName = process.env.BRANCH_NAME;
      const branchUrl = `https://github.com/${{ github.repository }}/tree/${branchName}`;
      const prState = '${{ github.event.pull_request.state }}';
      const prAction = '${{ github.event.action }}';
      
      try {
        // Get current issue
        const issue = await github.rest.issues.get({
          owner: context.repo.owner,
          repo: context.repo.repo,
          issue_number: issueNumber
        });
      
        let currentBody = issue.data.body || '';
      
        // Status emoji based on PR state
        let statusEmoji = '🔄'; // default
        if (prState === 'closed' && '${{ github.event.pull_request.merged }}' === 'true') {
          statusEmoji = '✅'; // merged
        } else if (prState === 'closed') {
          statusEmoji = '❌'; // closed without merge
        } else if (prAction === 'opened') {
          statusEmoji = '🆕'; // newly opened
        }
      
        if (!currentBody.includes('## 🔗 Collegamenti')) {
          // Add new links section
          const linksSection = `

  ## 🔗 Collegamenti

  ### 🌿 Branch
- **Branch attivo**: [\`${branchName}\`](${branchUrl})

  ### 🔀 Pull Request
- ${statusEmoji} **PR #${prNumber}**: [${prUrl}](${prUrl})
- **Stato**: ${prState === 'open' ? 'Aperta' : prState === 'closed' ? ('${{ github.event.pull_request.merged }}' === 'true' ? 'Merged' : 'Chiusa') : prState}
- **Aggiornata**: ${new Date().toLocaleString('it-IT')}

---
*Collegamenti aggiornati automaticamente*`;
  
  currentBody += linksSection;
  } else {
  // Update existing PR info
  if (currentBody.includes('### 🔀 Pull Request')) {
  currentBody = currentBody.replace(
  /### 🔀 Pull Request[\s\S]*?(?=###|---|\n\n|$)/,
  `### 🔀 Pull Request
- ${statusEmoji} **PR #${prNumber}**: [${prUrl}](${prUrl})
- **Stato**: ${prState === 'open' ? 'Aperta' : prState === 'closed' ? ('${{ github.event.pull_request.merged }}' === 'true' ? 'Merged' : 'Chiusa') : prState}
- **Aggiornata**: ${new Date().toLocaleString('it-IT')}
  
  `
  );
} else {
  // Add PR section to existing links
  const prSection = `
  ### 🔀 Pull Request
- ${statusEmoji} **PR #${prNumber}**: [${prUrl}](${prUrl})
- **Stato**: ${prState === 'open' ? 'Aperta' : prState === 'closed' ? ('${{ github.event.pull_request.merged }}' === 'true' ? 'Merged' : 'Chiusa') : prState}
- **Aggiornata**: ${new Date().toLocaleString('it-IT')}
  
  `;
  currentBody = currentBody.replace('---\n*Collegamenti aggiornati automaticamente*', prSection + '---\n*Collegamenti aggiornati automaticamente*');
}
}

  await github.rest.issues.update({
owner: context.repo.owner,
repo: context.repo.repo,
issue_number: issueNumber,
body: currentBody
});
  
  console.log(`✅ Issue #${issueNumber} updated with PR #${prNumber} link`);
  
  // Add comment on PR creation
  if (prAction === 'opened') {
  await github.rest.issues.createComment({
owner: context.repo.owner,
repo: context.repo.repo,
issue_number: prNumber,
body: `🔗 **Collegata alla Issue #${issueNumber}**\n\nQuesta PR è stata automaticamente collegata alla issue #${issueNumber}. La issue verrà chiusa automaticamente quando questa PR sarà merged.`
});
}

} catch (error) {
  console.log(`❌ Error updating issue #${issueNumber}:`, error.message);
}
